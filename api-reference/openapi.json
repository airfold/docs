{
  "openapi": "3.0.0",
  "info": {
    "title": "Airfold API",
    "version": "1.0.0"
  },
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "airfold.ssid"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "tokenAuth": {
        "type": "apiKey",
        "in": "query",
        "name": "token"
      }
    },
    "schemas": {
      "InvalidRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "TableMapping": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project Id"
          },
          "databaseId": {
            "type": "string",
            "description": "Database Id"
          },
          "tableId": {
            "type": "string",
            "description": "Table Id"
          },
          "sourceName": {
            "type": "string",
            "description": "Source name"
          },
          "tableSchema": {
            "type": "string",
            "description": "Table SQL schema"
          }
        }
      },
      "PutUploadRequest": {
        "type": "object",
        "required": [
          "parts",
          "size"
        ],
        "properties": {
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PutUploadRequestPart"
            }
          },
          "size": {
            "type": "integer",
            "example": 1024
          }
        }
      },
      "PutUploadRequestPart": {
        "type": "object",
        "required": [
          "md5",
          "part_number",
          "size"
        ],
        "properties": {
          "md5": {
            "type": "string",
            "example": "base64-encoded-md5"
          },
          "part_number": {
            "type": "integer",
            "example": 1
          },
          "size": {
            "type": "integer",
            "example": 1024
          }
        }
      },
      "PutUploadResponse": {
        "type": "object",
        "required": [
          "parts",
          "upload_id"
        ],
        "properties": {
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PutUploadResponsePart"
            }
          },
          "upload_id": {
            "type": "string",
            "example": "upload_id"
          }
        }
      },
      "PutUploadResponsePart": {
        "type": "object",
        "required": [
          "part_number",
          "url"
        ],
        "properties": {
          "part_number": {
            "type": "integer",
            "example": 1
          },
          "url": {
            "type": "string",
            "example": "signed-s3-url"
          }
        }
      },
      "CommitRequest": {
        "type": "object",
        "required": [
          "parts"
        ],
        "properties": {
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitRequestPart"
            }
          }
        }
      },
      "CommitRequestPart": {
        "type": "object",
        "required": [
          "etag",
          "part_number"
        ],
        "properties": {
          "etag": {
            "type": "string",
            "example": "base64-encoded-md5"
          },
          "part_number": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "CommitResponse": {
        "type": "object"
      },
      "AbortResponse": {
        "type": "object"
      },
      "UserPermissions": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string",
            "description": "Organization id for permissions"
          },
          "userPerms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        }
      },
      "Permission": {
        "type": "object",
        "nullable": true,
        "properties": {
          "Effect": {
            "type": "string",
            "description": "Allow | Deny"
          },
          "Action": {
            "type": "string",
            "description": "Action name"
          },
          "Resource": {
            "type": "string",
            "description": "Resource mask/match string"
          }
        },
        "required": [
          "Effect",
          "Action",
          "Resource"
        ]
      },
      "Organization": {
        "type": "object",
        "nullable": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization id"
          },
          "name": {
            "type": "string",
            "description": "Organization name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User id"
          },
          "fname": {
            "type": "string",
            "description": "User first name"
          },
          "lname": {
            "type": "string",
            "description": "User last name"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "avatar": {
            "type": "string",
            "description": "Path to user image",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "User full name (fname + lname)"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPermissions"
            }
          }
        },
        "required": [
          "id",
          "fname",
          "lname",
          "email",
          "avatar",
          "fullName",
          "organization",
          "permissions"
        ]
      },
      "ProjectProfile": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string",
            "description": "Organization id"
          },
          "projectId": {
            "type": "string",
            "description": "Project id"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        },
        "required": [
          "orgId",
          "projectId",
          "permissions"
        ]
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "user"
        ]
      },
      "CreateSubscription": {
        "type": "object",
        "required": [
          "plan_name"
        ],
        "properties": {
          "plan_name": {
            "type": "string",
            "enum": [
              "free",
              "pro"
            ],
            "description": "Subscription Plan name"
          }
        }
      },
      "BillingConfig": {
        "type": "object",
        "properties": {
          "publishableKey": {
            "type": "string",
            "description": "Stripe publishable key"
          }
        }
      },
      "RetryInvoice": {
        "type": "object",
        "required": [
          "payment_method_id",
          "invoice_id"
        ],
        "properties": {
          "payment_method_id": {
            "type": "string",
            "description": "Payment method id"
          },
          "invoice_id": {
            "type": "string",
            "description": "Invoice id"
          }
        }
      },
      "UpdateSubscription": {
        "type": "object",
        "required": [
          "new_plan_name"
        ],
        "properties": {
          "new_plan_name": {
            "type": "string",
            "enum": [
              "free",
              "pro"
            ],
            "description": "New plan name"
          }
        }
      },
      "SnowflakeConnectorProfile": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "Snowflake username"
          },
          "account": {
            "type": "string",
            "description": "Snowflake account"
          },
          "warehouse": {
            "type": "string",
            "description": "Snowflake warehouse",
            "default": "COMPUTE_WH"
          },
          "database": {
            "type": "string",
            "description": "Snowflake database"
          },
          "role": {
            "type": "string",
            "description": "Snowflake role"
          }
        },
        "required": [
          "user",
          "account",
          "database"
        ]
      },
      "Connector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Connector ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "snowflake"
            ],
            "description": "Connector type"
          },
          "profile": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SnowflakeConnectorProfile"
              }
            ]
          }
        },
        "required": [
          "id",
          "type",
          "profile"
        ]
      },
      "ChangeOwner": {
        "type": "object",
        "required": [
          "owner"
        ],
        "properties": {
          "owner": {
            "type": "string",
            "description": "New owner email"
          },
          "payment_method_id": {
            "type": "string",
            "description": "New owner payment method id"
          }
        }
      },
      "CreateOrg": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "credentials": {
            "type": "object",
            "description": "External ClickHouse credentials",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "ClickHouse instance https URL"
              },
              "username": {
                "type": "string",
                "description": "ClickHouse instance username"
              },
              "password": {
                "type": "string",
                "description": "ClickHouse instance password"
              }
            }
          }
        }
      },
      "OrgInList": {
        "type": "object",
        "required": [
          "id",
          "name",
          "role",
          "isOwner",
          "ownerEmail"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization id"
          },
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "role": {
            "type": "string",
            "description": "User role in organization"
          },
          "isOwner": {
            "type": "boolean",
            "description": "Organization owner status"
          },
          "ownerEmail": {
            "type": "string",
            "description": "Organization owner email"
          },
          "instanceUrl": {
            "type": "string",
            "description": "ClickHouse instance URL"
          },
          "instanceUser": {
            "type": "string",
            "description": "ClickHouse instance username"
          }
        }
      },
      "Instance": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the ClickHouse instance/service"
          },
          "username": {
            "type": "string",
            "description": "Username of the ClickHouse instance/service"
          }
        },
        "required": [
          "url",
          "username"
        ]
      },
      "OrgMember": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Member email address"
          },
          "role": {
            "type": "string",
            "description": "Member role"
          },
          "isOwner": {
            "type": "boolean",
            "description": "Member is the organization owner"
          }
        },
        "required": [
          "email",
          "role"
        ]
      },
      "ClickHouseCredentials": {
        "type": "object",
        "required": [
          "url",
          "username",
          "password"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "ClickHouse instance https URL"
          },
          "username": {
            "type": "string",
            "description": "ClickHouse instance username"
          },
          "password": {
            "type": "string",
            "description": "ClickHouse instance password"
          }
        }
      },
      "UpdateOrg": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New organization name"
          }
        }
      },
      "Project": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Project id"
          },
          "name": {
            "type": "string",
            "description": "Project name"
          }
        }
      },
      "ProjectCreate": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name"
          }
        }
      },
      "ProjectKeyCreate": {
        "type": "object",
        "required": [
          "name",
          "role"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Key name"
          },
          "role": {
            "type": "string",
            "description": "Key role"
          }
        }
      },
      "ProjectStatus": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Project id"
          },
          "name": {
            "type": "string",
            "description": "Project name"
          }
        }
      },
      "ProjectStatusFull": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Project id"
          },
          "name": {
            "type": "string",
            "description": "Project name"
          },
          "orgId": {
            "type": "string",
            "description": "Organization id"
          },
          "orgName": {
            "type": "string",
            "description": "Organization name"
          }
        }
      },
      "ProjectKey": {
        "type": "object",
        "required": [
          "projectId",
          "name",
          "key",
          "role",
          "permissions"
        ],
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project id"
          },
          "name": {
            "type": "string",
            "description": "Project key name"
          },
          "key": {
            "type": "string",
            "description": "Project API key"
          },
          "role": {
            "type": "string",
            "description": "Project key role"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Project key creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Project key creation timestamp"
          },
          "lastUsedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Project key creation timestamp"
          }
        }
      },
      "ProjectKeyUpdate": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "Key role"
          }
        }
      },
      "ExecutionPlan": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Command with arguments"
        }
      },
      "DoctorIssue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Issue id"
          },
          "description": {
            "type": "string",
            "description": "Issue description"
          },
          "severity": {
            "type": "string",
            "enum": [
              "error",
              "warning"
            ],
            "default": "error",
            "description": "Severity of the issue"
          }
        },
        "description": "Issue information"
      },
      "DoctorFixResult": {
        "type": "object",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/DoctorIssue"
          },
          "message": {
            "type": "string",
            "description": "Fix description message"
          },
          "status": {
            "type": "string",
            "enum": [
              "fixed",
              "failed"
            ]
          }
        },
        "description": "Fix result"
      },
      "DoctorRunResponse": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/DoctorIssue"
            },
            {
              "$ref": "#/components/schemas/DoctorFixResult"
            }
          ]
        }
      },
      "ProjectPullResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Object content"
        }
      },
      "LintResult": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Found errors"
          },
          "files": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PipeFile"
                },
                {
                  "$ref": "#/components/schemas/SourceFile"
                }
              ]
            },
            "description": "Formatted files"
          },
          "diff": {
            "type": "string",
            "description": "Diff between sent and stored objects"
          },
          "pulled_files": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PipeFile"
                },
                {
                  "$ref": "#/components/schemas/SourceFile"
                }
              ]
            },
            "description": "Pulled files"
          }
        }
      },
      "ProjectGraph": {
        "type": "object"
      },
      "PipeParam": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Param name"
          },
          "type": {
            "type": "string",
            "enum": [
              "int",
              "float",
              "string",
              "date",
              "bool",
              "datetime"
            ],
            "description": "Param type"
          },
          "default": {
            "type": "string",
            "description": "Default value, optional"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "PipeNode": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Node name"
          },
          "description": {
            "type": "string",
            "description": "Node description"
          },
          "sql": {
            "type": "string",
            "description": "Node query"
          }
        },
        "required": [
          "name",
          "sql"
        ]
      },
      "PipeRefresh": {
        "type": "object",
        "properties": {
          "strategy": {
            "type": "string",
            "enum": [
              "replace",
              "append"
            ]
          },
          "interval": {
            "type": "string",
            "description": "Refresh interval"
          },
          "refresh_on_create": {
            "type": "bool",
            "default": false,
            "description": "Refresh on create"
          },
          "settings": {
            "type": "object",
            "description": "Refresh settings"
          },
          "disabled": {
            "type": "bool",
            "default": false,
            "description": "Refresh disabled"
          }
        },
        "required": [
          "strategy",
          "interval"
        ]
      },
      "PipeFile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pipe name"
          },
          "description": {
            "type": "string",
            "description": "Pipe description"
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/PipeNode"
              }
            }
          },
          "to": {
            "type": "string",
            "description": "Target source"
          },
          "publish": {
            "type": "string",
            "description": "Endpoint name"
          },
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipeParam"
            }
          },
          "refresh": {
            "$ref": "#/components/schemas/PipeRefresh"
          }
        },
        "required": [
          "name",
          "nodes"
        ]
      },
      "SourceFile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Source name"
          },
          "description": {
            "type": "string",
            "description": "Source description"
          },
          "cols": {
            "type": "object",
            "description": "Table schema",
            "additionalProperties": {
              "type": "string",
              "description": "Column type and definition"
            }
          },
          "settings": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              },
              {
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "name",
          "cols"
        ]
      },
      "Template": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "description": {
            "type": "string",
            "description": "Template description"
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "RenameRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name"
          }
        },
        "required": [
          "name"
        ]
      },
      "BatchJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Job id"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "running",
              "completed",
              "failed",
              "canceled"
            ],
            "description": "Job status"
          },
          "created_at": {
            "type": "string",
            "description": "Job creation time"
          },
          "updated_at": {
            "type": "string",
            "description": "Job last update time"
          },
          "error": {
            "type": "string",
            "description": "Error string, if any"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "status",
          "created_at",
          "updated_at",
          "columns"
        ]
      },
      "MaskedRows": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "description": "Rows queued for batch re-calculation",
        "required": [
          "columns"
        ]
      },
      "AITemplateDesc": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Template path id"
          },
          "meta": {
            "type": "object",
            "description": "Template metadata",
            "properties": {
              "kind": {
                "type": "string",
                "description": "Template kind"
              },
              "description": {
                "type": "string",
                "description": "Template description"
              },
              "version": {
                "type": "number",
                "description": "Template serial version"
              }
            }
          }
        },
        "required": [
          "path",
          "meta"
        ]
      },
      "AITemplateSchema": {
        "type": "object"
      },
      "SecretMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Secret id"
          },
          "name": {
            "type": "string",
            "description": "Secret name"
          },
          "created_at": {
            "type": "string",
            "description": "Secret creation time",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Secret last update time",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "Secret type"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at",
          "type"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.us.airfold.co",
      "description": "Airfold US server"
    }
  ],
  "paths": {
    "/v1/files/{source_name}/{filename}": {
      "get": {
        "operationId": "getSourceFileSignedUrl",
        "summary": "Gets the signed URL for a file.",
        "description": "Gets the signed URL for a file.",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "source_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          },
          {
            "type": "string",
            "description": "Row ID",
            "name": "row_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Filename. E.g.: `example.pdf`",
            "name": "filename",
            "in": "path",
            "required": true
          }
        ]
      },
      "delete": {
        "operationId": "deleteSourceFile",
        "summary": "Deletes a file from a source.",
        "description": "Deletes a file from a source.",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "source_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          },
          {
            "type": "string",
            "description": "Row ID",
            "name": "row_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Filename. E.g.: `example.pdf`",
            "name": "filename",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      },
      "post": {
        "operationId": "putSourceFile",
        "description": "This route has few working modes:\n\n1. Preparing multipart upload. This requires passing `?begin` query parameter.\n2. Committing multipart upload. This requires passing `?commit&upload_id=...`\nquery parameters.\n\nPlease note that these 2 modes require different request body and\nreturn different response body (described in responses).",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Handles upload process",
        "parameters": [
          {
            "type": "boolean",
            "description": "Indicates URL-generating stage (doesn't require a value)",
            "name": "begin",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Indicates upload completing stage (doesn't require a value)",
            "name": "commit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Upload ID returned by `?begin`",
            "name": "upload_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Row ID",
            "name": "row_id",
            "in": "query",
            "required": true
          },
          {
            "in": "path",
            "name": "source_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          },
          {
            "type": "string",
            "description": "Filename. E.g.: `example.pdf`",
            "name": "filename",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PutUploadRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CommitRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PutUploadResponse"
                    },
                    {
                      "$ref": "#/components/schemas/CommitResponse"
                    },
                    {
                      "$ref": "#/components/schemas/AbortResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/v1/files/{source_name}": {
      "get": {
        "operationId": "listSourceFiles",
        "summary": "Lists files in a source.",
        "description": "Lists files in a source.",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "source_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/v1/events/{source_name}": {
      "post": {
        "operationId": "sendEvents",
        "tags": [
          "Events"
        ],
        "summary": "Post event(s) for ingestion into source.",
        "description": "Post event(s) for ingestion into source.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "source_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          },
          {
            "in": "query",
            "name": "wait",
            "schema": {
              "type": "boolean"
            },
            "description": "If set to `true` wait for the data to be written before returning"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Source not found"
          },
          "413": {
            "description": "Message too big"
          }
        }
      },
      "get": {
        "operationId": "getSourceSchema",
        "tags": [
          "Events"
        ],
        "summary": "Get source data schema.",
        "description": "Get source data schema.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "source_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableMapping"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Source not found"
          },
          "413": {
            "description": "Message too big"
          }
        }
      }
    },
    "/v1/auth/identity": {
      "get": {
        "operationId": "getIdentity",
        "tags": [
          "Auth"
        ],
        "summary": "Returns current user data.",
        "description": "Checks if user is authorized and returns user identity.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UserProfile"
                    },
                    {
                      "$ref": "#/components/schemas/ProjectProfile"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/{org_id}/members": {
      "post": {
        "operationId": "addOrgMember",
        "tags": [
          "Organizations"
        ],
        "summary": "Add or update organization member.",
        "description": "Add or update organization member.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMember"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      },
      "get": {
        "operationId": "listOrgMembers",
        "tags": [
          "Organizations"
        ],
        "summary": "List organization members.",
        "description": "List organization members.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMember"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/v1/{org_id}/owner": {
      "put": {
        "operationId": "changeOwner",
        "tags": [
          "Organizations"
        ],
        "summary": "Change organization owner.",
        "description": "Change organization owner.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOwner"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeOwner"
                }
              }
            }
          },
          "400": {
            "description": "Bad request data or new owner is not an Admin"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/v1/organizations": {
      "post": {
        "operationId": "createOrg",
        "tags": [
          "Organizations"
        ],
        "summary": "Create new organization.",
        "description": "Create new organization.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrg"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "description": "Bad request data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      },
      "get": {
        "operationId": "listOrganizations",
        "tags": [
          "Organizations"
        ],
        "summary": "Returns list of organizations.",
        "description": "Returns list of organizations the current user is member of.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgInList"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          }
        }
      }
    },
    "/v1/{org_id}": {
      "delete": {
        "operationId": "deleteOrg",
        "tags": [
          "Organizations"
        ],
        "summary": "Delete organization.",
        "description": "Delete organization.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Organization not found"
          }
        }
      },
      "post": {
        "operationId": "updateOrg",
        "tags": [
          "Organizations"
        ],
        "summary": "Change organization name.",
        "description": "Change organization name.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrg"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "description": "Bad request data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/v1/{org_id}/members/{member_email}": {
      "delete": {
        "operationId": "deleteOrgMember",
        "tags": [
          "Organizations"
        ],
        "summary": "Delete organization member.",
        "description": "Delete organization member.",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "member_email",
            "schema": {
              "type": "string"
            },
            "description": "Member email",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMember"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Member not found."
          }
        }
      }
    },
    "/v1/{org_id}/projects": {
      "post": {
        "operationId": "createProject",
        "tags": [
          "Projects"
        ],
        "summary": "Creates a new project.",
        "description": "Creates a new project in the organization.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "parameters for project creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      },
      "get": {
        "operationId": "listProjects",
        "tags": [
          "Projects"
        ],
        "summary": "Returns list of projects in organization.",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          }
        ],
        "description": "Returns list of projects in organization.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectStatus"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/keys": {
      "post": {
        "operationId": "createProjectKey",
        "tags": [
          "Projects"
        ],
        "summary": "Creates a new project key.",
        "description": "Creates a new project key.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "parameters for project key",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectKeyCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectKey"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing request parameter"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Role not found"
          }
        }
      },
      "get": {
        "operationId": "listProjectKeys",
        "tags": [
          "Projects"
        ],
        "summary": "Returns a list of project API keys.",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          }
        ],
        "description": "Returns a list of project API keys.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectKey"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}": {
      "delete": {
        "operationId": "deleteProject",
        "tags": [
          "Projects"
        ],
        "summary": "Delete project by id.",
        "description": "Deletes project by id.",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Project not found or user doesn't have access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequest"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getProject",
        "tags": [
          "Projects"
        ],
        "summary": "Returns project status and properties.",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          }
        ],
        "description": "Returns project status and properties.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatus"
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/keys/{key_name}": {
      "delete": {
        "operationId": "deleteProjectKey",
        "tags": [
          "Projects"
        ],
        "summary": "Delete project key.",
        "description": "Deletes project key.",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          },
          {
            "in": "path",
            "name": "key_name",
            "schema": {
              "type": "string"
            },
            "description": "Key name",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Project key not found or user doesn't have access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequest"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateProjectKey",
        "tags": [
          "Projects"
        ],
        "summary": "Update project key.",
        "description": "Update project key.",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          },
          {
            "in": "path",
            "name": "key_name",
            "schema": {
              "type": "string"
            },
            "description": "Key name",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "parameters for project key update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectKeyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Project key not found or user doesn't have access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequest"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{org_id}/projects/keys": {
      "get": {
        "operationId": "listAllProjectKeys",
        "tags": [
          "Projects"
        ],
        "summary": "Returns a list of all projects API keys.",
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          }
        ],
        "description": "Returns a list of all projects API keys.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectKey"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          }
        }
      }
    },
    "/v1/projects": {
      "get": {
        "operationId": "listAllProjects",
        "tags": [
          "Projects"
        ],
        "summary": "Returns list of all projects.",
        "description": "Returns list of all projects.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectStatusFull"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/pull": {
      "get": {
        "operationId": "pullProject",
        "tags": [
          "Projects"
        ],
        "summary": "Pull objects from project.",
        "description": "Pull objects from project.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Object name to pull. Can be used multiple times. If not specified, pull all objects.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPullResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/pull": {
      "get": {
        "operationId": "pullProjectBare",
        "tags": [
          "Projects"
        ],
        "summary": "Pull objects from project.",
        "description": "Pull objects from project.",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Object name to pull. Can be used multiple times. If not specified, pull all objects.",
            "required": false
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPullResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/push": {
      "post": {
        "operationId": "pushProject",
        "tags": [
          "Projects"
        ],
        "summary": "Push objects to project.",
        "description": "Push objects to project.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Name for a single object. Cannot be used with multiple objects.",
            "required": false
          },
          {
            "in": "query",
            "name": "dry_run",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Get execution plan without executing it."
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Force delete/overwrite even if data will be lost."
          },
          {
            "in": "query",
            "name": "rename",
            "schema": {
              "type": "string",
              "example": "name=new_name"
            },
            "description": "Use `rename` strategy. Specify a single renamed object name and its new name."
          }
        ],
        "requestBody": {
          "description": "parameters for project push",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Object to push in JSON format"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "List of objects to push in JSON format"
                    }
                  }
                ]
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string",
                "description": "Object(s) to push in YAML format"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionPlan"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/push": {
      "post": {
        "operationId": "pushProjectBare",
        "tags": [
          "Projects"
        ],
        "summary": "Push objects to project.",
        "description": "Push objects to project.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Name for a single object. Cannot be used with multiple objects.",
            "required": false
          },
          {
            "in": "query",
            "name": "dry_run",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Get execution plan without executing it"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Force delete/overwrite even if data will be lost."
          },
          {
            "in": "query",
            "name": "rename",
            "schema": {
              "type": "string",
              "example": "name=new_name"
            },
            "description": "Use `rename` strategy. Specify a single renamed object name and its new name."
          }
        ],
        "requestBody": {
          "description": "parameters for project push",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Object to push in JSON format"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "List of objects to push in JSON format"
                    }
                  }
                ]
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string",
                "description": "Object(s) to push in YAML format"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionPlan"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/graph": {
      "get": {
        "operationId": "graphProject",
        "tags": [
          "Projects"
        ],
        "summary": "Fetch project graph.",
        "description": "Fetch project graph.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Project graph"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/graph": {
      "get": {
        "operationId": "graphProjectBare",
        "tags": [
          "Projects"
        ],
        "summary": "Fetch project graph.",
        "description": "Fetch project graph.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Project graph"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/sources/{src_name}": {
      "delete": {
        "operationId": "deleteSource",
        "tags": [
          "Projects",
          "Sources"
        ],
        "summary": "Delete data source by name.",
        "description": "Delete data source by name.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          },
          {
            "in": "path",
            "name": "src_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          },
          {
            "in": "query",
            "name": "dry_run",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Get execution plan without executing it"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Force delete/overwrite even if data will be lost."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionPlan"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project or source not found"
          }
        }
      }
    },
    "/v1/sources/{src_name}": {
      "delete": {
        "operationId": "deleteSourceBare",
        "tags": [
          "Sources"
        ],
        "summary": "Delete data source by name.",
        "description": "Delete data source by name.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "src_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          },
          {
            "in": "query",
            "name": "dry_run",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Get execution plan without executing it"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Force delete/overwrite even if data will be lost."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionPlan"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project or source not found"
          }
        }
      },
      "put": {
        "operationId": "renameSourceBare",
        "tags": [
          "Sources"
        ],
        "summary": "Rename source by name.",
        "description": "Rename source by name.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "src_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          },
          {
            "in": "query",
            "name": "dry_run",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Get execution plan without executing it"
          }
        ],
        "requestBody": {
          "description": "parameters for rename",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionPlan"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project or source not found"
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/pipes/{pipe_name}": {
      "delete": {
        "operationId": "deletePipe",
        "tags": [
          "Projects",
          "Pipes"
        ],
        "summary": "Delete pipe by name.",
        "description": "Delete pipe by name.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          },
          {
            "in": "path",
            "name": "pipe_name",
            "schema": {
              "type": "string"
            },
            "description": "Pipe name",
            "required": true
          },
          {
            "in": "query",
            "name": "dry_run",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Get execution plan without executing it"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Force delete/overwrite even if data will be lost."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionPlan"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project or pipe not found"
          }
        }
      }
    },
    "/v1/pipes/{pipe_name_format}": {
      "delete": {
        "operationId": "deletePipeBare",
        "tags": [
          "Pipes"
        ],
        "summary": "Delete pipe by name.",
        "description": "Delete pipe by name.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "pipe_name_format",
            "schema": {
              "type": "string"
            },
            "description": "Pipe name",
            "required": true
          },
          {
            "in": "query",
            "name": "dry_run",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Get execution plan without executing it"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Force delete/overwrite even if data will be lost."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionPlan"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project or pipe not found"
          }
        }
      },
      "get": {
        "operationId": "getPipe",
        "tags": [
          "Pipes"
        ],
        "summary": "Returns data from a published pipe.",
        "parameters": [
          {
            "in": "path",
            "name": "pipe_name_format",
            "schema": {
              "type": "string"
            },
            "description": "Pipe name",
            "required": true
          }
        ],
        "description": "Returns data from a published pipe.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied."
          },
          "404": {
            "description": "Endpoint not found or cannot process format."
          }
        }
      },
      "put": {
        "operationId": "renamePipeBare",
        "tags": [
          "Pipes"
        ],
        "summary": "Rename pipe by name.",
        "description": "Rename pipe by name.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "pipe_name_format",
            "schema": {
              "type": "string"
            },
            "description": "Pipe name",
            "required": true
          },
          {
            "in": "query",
            "name": "dry_run",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Get execution plan without executing it"
          }
        ],
        "requestBody": {
          "description": "parameters for rename",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionPlan"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project or pipe not found"
          }
        }
      }
    },
    "/v1/run/{pipe_name_format}": {
      "get": {
        "operationId": "getRunPipe",
        "tags": [
          "Pipes"
        ],
        "summary": "Returns data from existing draft pipe.",
        "parameters": [
          {
            "in": "path",
            "name": "pipe_name_format",
            "schema": {
              "type": "string"
            },
            "description": "Pipe name",
            "required": true
          }
        ],
        "description": "Returns data from existing draft pipe.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          }
        }
      },
      "post": {
        "operationId": "runPipe",
        "tags": [
          "Pipes"
        ],
        "summary": "Create a pipe/source config and return the resulting data.",
        "parameters": [
          {
            "in": "path",
            "name": "pipe_name_format",
            "schema": {
              "type": "string"
            },
            "description": "Pipe name",
            "required": true
          }
        ],
        "description": "Create a pipe/source config and return the resulting data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "parameters for project push",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Object to push in JSON format"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "List of objects to push in JSON format"
                    }
                  }
                ]
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string",
                "description": "Object(s) to push in YAML format"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/schemas": {
      "post": {
        "operationId": "inferSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Infer source schema.",
        "description": "Infer source schema.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          },
          {
            "in": "query",
            "name": "compact_cols",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Use compact columns definition. E.g.: `col_name`: `col_type $.json_path`",
            "required": false
          }
        ],
        "requestBody": {
          "description": "Data to infer schema from",
          "content": {
            "application/x-ndjson": {
              "schema": {
                "type": "object"
              }
            },
            "application/csv": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/yaml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/schemas": {
      "post": {
        "operationId": "inferSchemaBare",
        "tags": [
          "Sources"
        ],
        "summary": "Infer source schema.",
        "description": "Infer source schema.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Data to infer schema from",
          "content": {
            "application/x-ndjson": {
              "schema": {
                "type": "object"
              }
            },
            "application/csv": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/yaml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/schemas/validate": {
      "post": {
        "operationId": "validateSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Validate source schema.",
        "description": "Validate source schema.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          },
          {
            "in": "query",
            "name": "schema",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Should be a valid JSON or YAML format"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "default": "json",
              "enum": [
                "json",
                "yaml"
              ]
            },
            "description": "Format of the schema"
          }
        ],
        "requestBody": {
          "description": "Data to validate schema against",
          "content": {
            "application/x-ndjson": {
              "schema": {
                "type": "object"
              }
            },
            "application/csv": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/schemas/validate": {
      "post": {
        "operationId": "validateSchemaBare",
        "tags": [
          "Sources"
        ],
        "summary": "Validate source schema.",
        "description": "Validate source schema.",
        "parameters": [
          {
            "in": "query",
            "name": "schema",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Should be a valid JSON or YAML format"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "default": "json",
              "enum": [
                "json",
                "yaml"
              ]
            },
            "description": "Format of the schema"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Data to validate schema against. Optional but content-type must be set.",
          "content": {
            "application/x-ndjson": {
              "schema": {
                "type": "object"
              }
            },
            "application/csv": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/{org_id}/projects/{proj_id}/pipes/{pipe_name}/materialize": {
      "get": {
        "operationId": "materializePipe",
        "tags": [
          "Pipes"
        ],
        "summary": "Get materialized pipe from draft.",
        "description": "Get materialized pipe from draft.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_id",
            "schema": {
              "type": "string"
            },
            "description": "Organization id",
            "required": true
          },
          {
            "in": "path",
            "name": "proj_id",
            "schema": {
              "type": "string"
            },
            "description": "Project id",
            "required": true
          },
          {
            "in": "path",
            "name": "pipe_name",
            "schema": {
              "type": "string"
            },
            "description": "Pipe name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PipeFile"
                      },
                      {
                        "$ref": "#/components/schemas/SourceFile"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/pipes/{pipe_name_format}/materialize": {
      "get": {
        "operationId": "materializePipeBare",
        "tags": [
          "Pipes"
        ],
        "summary": "Get materialized pipe from draft.",
        "description": "Get materialized pipe from draft.",
        "parameters": [
          {
            "in": "path",
            "name": "pipe_name_format",
            "schema": {
              "type": "string"
            },
            "description": "Pipe name",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PipeFile"
                      },
                      {
                        "$ref": "#/components/schemas/SourceFile"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found or pipe not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/metrics": {
      "get": {
        "operationId": "getMetrics",
        "tags": [
          "Observability"
        ],
        "summary": "Get source metrics.",
        "description": "Get source/pipe metrics.\nIt returns an array of arrays, with each inner array containing specific source/pipe metrics values.\nThe structure adheres to the ClickHouse JSONCompact format.\nOnly total metrics are returned if neither `from_dt` nor `to_dt` nor `timespan` is provided.\nBinned metrics will be added to the response if `time_interval_s` is specified.\nIf `time_interval_s` is provided, metrics will be binned within the specified time interval.\n",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Source name. Can be repeated multiple times. If not provided, metrics for all sources will be returned.",
            "required": false
          },
          {
            "in": "query",
            "name": "time_interval_s",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Time interval in seconds for binning metrics. Used in conjunction with `from_dt` and `to_dt` to bin metrics within the specified time range.",
            "required": false
          },
          {
            "in": "query",
            "name": "from_dt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Start date-time for filtering metrics. Should be used in conjunction with `to_dt`.",
            "required": false
          },
          {
            "in": "query",
            "name": "to_dt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "End date-time for filtering metrics. Should be used in conjunction with `from_dt`.",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "default": "source",
              "enum": [
                "source",
                "pipe"
              ]
            },
            "description": "Type of metrics to fetch. Can be `source` or `pipe`.",
            "required": false
          },
          {
            "in": "query",
            "name": "timespan",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Timespan for metrics in seconds. If provided, `from_dt` and `to_dt` will be ignored.",
            "required": false
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The output structure if `type` is `source`:\n```json\n[\n  [\n    \"source_name_1_val\", \"bytes_on_disk_val\", \"rows_val\", \"errors_val\", \"ingested_bytes_val\", \"ingested_rows_val\", \"ai_prompt_tokens_val\", \"ai_completion_tokens_val\", \"ai_total_tokens_val\", [\n      [\"ts_1\", \"bytes_on_disk_1\", \"rows_1\", \"errors_1\", \"ingested_bytes_1\", \"ingested_rows_1\", \"ai_prompt_tokens_1\", \"ai_completion_tokens_1\", \"ai_total_tokens_1\"],\n      [\"ts_2\", \"bytes_on_disk_2\", \"rows_2\", \"errors_2\", \"ingested_bytes_2\", \"ingested_rows_2\", \"ai_prompt_tokens_2\", \"ai_completion_tokens_2\", \"ai_total_tokens_2\"],\n    ...\n    ]\n  ],\n  [\n    \"source_name_2_val\", \"bytes_on_disk_val\", \"rows_val\", \"errors_val\", \"ingested_bytes_val\", \"ingested_rows_val\", \"ai_prompt_tokens_val\", \"ai_completion_tokens_val\", \"ai_total_tokens_val\", [\n      [\"ts_1\", \"bytes_on_disk_1\", \"rows_1\", \"errors_1\", \"ingested_bytes_1\", \"ingested_rows_1\", \"ai_prompt_tokens_1\", \"ai_completion_tokens_1\", \"ai_total_tokens_1\"],\n      [\"ts_2\", \"bytes_on_disk_2\", \"rows_2\", \"errors_2\", \"ingested_bytes_2\", \"ingested_rows_2\", \"ai_prompt_tokens_1\", \"ai_completion_tokens_1\", \"ai_total_tokens_1\"],\n      ...\n    ],\n  ],\n  ...\n]\n```\nThe output structure if `type` is `pipe`:\n```json\n[\n  [\n    \"pipe_name_1_val\", \"requests_count_val\", \"errors_count_val\", \"avg_resp_latency_val\", \"avg_resp_size_val\", [\n      [\"ts_1\", \"requests_count_1\", \"errors_count_1\", \"avg_resp_latency_1\", \"avg_resp_size_1\"],\n      [\"ts_2\", \"requests_count_2\", \"errors_count_2\", \"avg_resp_latency_2\", \"avg_resp_size_2\"],\n      ...\n    ]\n  ],\n  [\n    \"pipe_name_2_val\", \"requests_count_val\", \"errors_count_val\", \"avg_resp_latency_val\", \"avg_resp_size_val\", [\n      [\"ts_1\", \"requests_count_1\", \"errors_count_1\", \"avg_resp_latency_1\", \"avg_resp_size_1\"],\n      [\"ts_2\", \"requests_count_2\", \"errors_count_2\", \"avg_resp_latency_2\", \"avg_resp_size_2\"],\n      ...\n    ],\n  ],\n  ...\n]\n```\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/metrics/rmv": {
      "get": {
        "operationId": "getRMVMetrics",
        "tags": [
          "Observability"
        ],
        "summary": "Get refreshable pipe metrics.",
        "description": "Get refreshable materialized pipe metrics.\nIt returns an array of arrays, with each inner array containing specific pipe metrics values.\nThe structure adheres to the ClickHouse JSONCompact format.\n",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Source name or refreshable pipe name. Can be repeated multiple times. If not provided, metrics for refreshable pipes will be returned.",
            "required": false
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The output structure:\n```json\n[\n  [\n    \"pipe_name_1_val\", \"status\", \"error\", \"retry\", \"progress\", \"read_rows\", \"read_bytes\", \"estimated_rows_to_read\", \"written_rows\", \"written_bytes\",\n    \"last_success_time\", \"last_success_duration_ms\", \"last_refresh_time\", \"next_refresh_time\"\n  ],\n  [\n   \"pipe_name_2_val\", \"status\", \"error\", \"retry\", \"progress\", \"read_rows\", \"read_bytes\", \"estimated_rows_to_read\", \"written_rows\", \"written_bytes\",\n    \"last_success_time\", \"last_success_duration_ms\", \"last_refresh_time\", \"next_refresh_time\"\n  ],\n  ...\n]\n```\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/schemas/ai": {
      "post": {
        "operationId": "getAIData",
        "tags": [
          "Sources"
        ],
        "summary": "Get AI processed rows.",
        "description": "Get AI processed rows.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Multipart message for schema and data.",
          "content": {
            "application/x-ndjson": {
              "schema": {
                "type": "string"
              }
            },
            "application/csv": {
              "schema": {
                "type": "string"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/sources/{src_name}/data": {
      "delete": {
        "operationId": "deleteSourceDataBare",
        "tags": [
          "Sources"
        ],
        "summary": "Delete source data.",
        "description": "Delete source data. Use `where` query parameter to filter rows to delete. If `where` is not provided, all rows will be deleted(truncated).",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "src_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "schema": {
              "type": "string"
            },
            "description": "SQL WHERE clause to filter rows to delete.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project or source not found"
          }
        }
      }
    },
    "/v1/usage": {
      "get": {
        "operationId": "getUsage",
        "tags": [
          "Observability"
        ],
        "summary": "Get usage.",
        "description": "Get usage.\nIt returns array of values.\nThe structure adheres to the ClickHouse JSONCompact format.\nBinned metrics will be added to the response if `time_interval_s` is specified.\nIf `time_interval_s` is provided, metrics will be binned within the specified time interval.\n",
        "parameters": [
          {
            "in": "query",
            "name": "time_interval_s",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Time interval in seconds for binning usage metrics. Used in conjunction with `from_dt` and `to_dt` to bin usage metrics within the specified time range.",
            "required": false
          },
          {
            "in": "query",
            "name": "from_dt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Start date-time for filtering usage metrics. Should be used in conjunction with `to_dt`.",
            "required": false
          },
          {
            "in": "query",
            "name": "to_dt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "End date-time for filtering usage metrics. Should be used in conjunction with `from_dt`.",
            "required": false
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The output structure:\n```json\n[\n  \"processed_bytes\", \"stored_bytes\", \"ai_prompt_tokens\", \"ai_completion_tokens\", \"ai_total_tokens\",\n  \"api_requests\", \"api_avg_resp_latency\", \"api_errors\", [\n    [\"time_1\", \"processed_bytes_1\", \"stored_bytes_1\", \"ai_prompt_tokens_1\", \"ai_completion_tokens_1\", \"ai_total_tokens_1\", \"api_requests_1\", \"api_avg_resp_latency_1\", \"api_errors_1\"],\n    [\"time_2\", \"processed_bytes_2\", \"stored_bytes_2\", \"ai_prompt_tokens_2\", \"ai_completion_tokens_2\", \"ai_total_tokens_2\", \"api_requests_2\", \"api_avg_resp_latency_2\", \"api_errors_2\"],\n    ...\n  ]\n]\n```\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/openapi": {
      "get": {
        "operationId": "getOpenapiDoc",
        "tags": [
          "Pipes"
        ],
        "summary": "Get OpenAPI doc for all accessible pipes.",
        "description": "Get OpenAPI doc for all accessible pipes.",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OpenAPI doc.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/pipes": {
      "get": {
        "operationId": "listPipeDoc",
        "tags": [
          "Pipes"
        ],
        "summary": "Get OpenAPI doc for all accessible pipes.",
        "description": "Get OpenAPI doc for all accessible pipes.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OpenAPI doc.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/schemas/ai2": {
      "post": {
        "operationId": "getAIData2",
        "tags": [
          "Sources"
        ],
        "summary": "Get AI processed rows.",
        "description": "Get AI processed rows.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Multipart message for schema and data.",
          "content": {
            "application/x-ndjson": {
              "schema": {
                "type": "string"
              }
            },
            "application/csv": {
              "schema": {
                "type": "string"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/snowflake/sample": {
      "post": {
        "operationId": "getSnowflakeDataSample",
        "tags": [
          "Snowflake"
        ],
        "summary": "Get sample of data from Snowflake.",
        "description": "Get sample of data from Snowflake.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "Snowflake secret to use"
                  },
                  "table": {
                    "type": "string",
                    "description": "Snowflake table"
                  },
                  "schema": {
                    "type": "string",
                    "description": "Snowflake table schema",
                    "default": "PUBLIC"
                  },
                  "sample_size": {
                    "type": "integer",
                    "description": "Sample size, rows",
                    "default": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/snowflake/schema": {
      "post": {
        "operationId": "getSnowflakeSchema",
        "tags": [
          "Snowflake"
        ],
        "summary": "Get Snowflake schema, list of tables.",
        "description": "Get Snowflake schema, list of tables.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "Snowflake secret to use"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/snowflake/test": {
      "post": {
        "operationId": "testSnowflakeCredentials",
        "tags": [
          "Snowflake"
        ],
        "summary": "Test Snowflake credentials.",
        "description": "Test Snowflake credentials.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Snowflake credentials",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "Snowflake username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Snowflake password"
                  },
                  "account": {
                    "type": "string",
                    "description": "Snowflake account"
                  },
                  "warehouse": {
                    "type": "string",
                    "default": "COMPUTE_WH",
                    "description": "Snowflake warehouse"
                  },
                  "database": {
                    "type": "string",
                    "description": "Snowflake database"
                  },
                  "schema": {
                    "type": "string",
                    "default": "public",
                    "description": "Snowflake schema"
                  },
                  "role": {
                    "type": "string",
                    "description": "Snowflake role. Optional."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/postgres/sample": {
      "post": {
        "operationId": "getPostgresDataSample",
        "tags": [
          "PostgreSQL"
        ],
        "summary": "Get sample of data from PostgreSQL.",
        "description": "Get sample of data from PostgreSQL.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "PostgreSQL secret to use"
                  },
                  "table": {
                    "type": "string",
                    "description": "PostgreSQL table"
                  },
                  "schema": {
                    "type": "string",
                    "description": "PostgreSQL table schema",
                    "default": "public"
                  },
                  "sample_size": {
                    "type": "integer",
                    "description": "Sample size, rows",
                    "default": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/postgres/schema": {
      "post": {
        "operationId": "getPostgresSchema",
        "tags": [
          "PostgreSQL"
        ],
        "summary": "Get PostgreSQL schema, list of tables.",
        "description": "Get PostgreSQL schema, list of tables.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "PostgreSQL secret to use"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/postgres/test": {
      "post": {
        "operationId": "testPostgresCredentials",
        "tags": [
          "PostgreSQL"
        ],
        "summary": "Test PostgreSQL credentials.",
        "description": "Test PostgreSQL credentials.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "PostgreSQL credentials",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "PostgreSQL username"
                  },
                  "password": {
                    "type": "string",
                    "description": "PostgreSQL password"
                  },
                  "host": {
                    "type": "string",
                    "description": "PostgreSQL hostname"
                  },
                  "port": {
                    "type": "string",
                    "default": 5432,
                    "description": "PostgreSQL TCP port"
                  },
                  "database": {
                    "type": "string",
                    "description": "PostgreSQL database"
                  },
                  "schema": {
                    "type": "string",
                    "default": "public",
                    "description": "PostgreSQL schema"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/postgres/table": {
      "post": {
        "operationId": "suggestPostgresTableSchema",
        "tags": [
          "PostgreSQL"
        ],
        "summary": "Get suggested PostgreSQL table schema.",
        "description": "Get suggested PostgreSQL table schema.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "PostgreSQL secret to use"
                  },
                  "table": {
                    "type": "string",
                    "description": "PostgreSQL table"
                  },
                  "schema": {
                    "type": "string",
                    "description": "PostgreSQL table schema, optional"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/yaml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/s3/sample": {
      "post": {
        "operationId": "getS3DataSample",
        "tags": [
          "S3"
        ],
        "summary": "Get sample of data from S3.",
        "description": "Get sample of data from S3.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "S3 secret to use"
                  },
                  "bucket": {
                    "type": "string",
                    "description": "S3 bucket"
                  },
                  "path": {
                    "type": "string",
                    "description": "S3 path"
                  },
                  "role_arn": {
                    "type": "string",
                    "description": "S3 role ARN"
                  },
                  "external_id": {
                    "type": "string",
                    "description": "S3 role external ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/sources/{src_name}/jobs": {
      "get": {
        "operationId": "getSourceJobs",
        "tags": [
          "Sources"
        ],
        "summary": "Get all batch jobs for a source.",
        "description": "Get all batch jobs for a source.",
        "parameters": [
          {
            "in": "path",
            "name": "src_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name to connect from",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found or pipe not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/cron/jobs": {
      "get": {
        "operationId": "getCronJobs",
        "tags": [
          "Sources"
        ],
        "summary": "Get all scheduled jobs.",
        "description": "Get all scheduled jobs.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found or pipe not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/sources/{src_name}/connect/{tgt_name}": {
      "get": {
        "operationId": "connectSources",
        "tags": [
          "Sources"
        ],
        "summary": "Get a pipe to connect two sources.",
        "description": "Get a pipe to connect two sources.",
        "parameters": [
          {
            "in": "path",
            "name": "src_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name to connect from",
            "required": true
          },
          {
            "in": "path",
            "name": "tgt_name",
            "schema": {
              "type": "string"
            },
            "description": "Source name to connect to",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PipeFile"
                      },
                      {
                        "$ref": "#/components/schemas/SourceFile"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found or pipe not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/transforms/{name}": {
      "post": {
        "operationId": "recalculateTransform",
        "tags": [
          "Transforms"
        ],
        "summary": "Recalculate transformed columns.",
        "description": "Recalculate transformed columns.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Transform name",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Recalc config",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "columns": {
                    "type": "array",
                    "description": "Columns to recalculate",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/transforms/{name}/jobs": {
      "get": {
        "operationId": "listTransformJobs",
        "tags": [
          "Transforms"
        ],
        "summary": "List transform jobs.",
        "description": "List transform jobs.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Transform name",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchJob"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/transforms/jobs": {
      "get": {
        "operationId": "listTransformJobs",
        "tags": [
          "Transforms"
        ],
        "summary": "List transform jobs.",
        "description": "List transform jobs.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchJob"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/transforms/jobs/{job_id}": {
      "get": {
        "operationId": "getTransformJob",
        "tags": [
          "Transforms"
        ],
        "summary": "Get transform job by id.",
        "description": "Get transform job by id.",
        "parameters": [
          {
            "in": "path",
            "name": "job_id",
            "schema": {
              "type": "string"
            },
            "description": "Job id",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchJob"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/transforms/{name}/rows": {
      "get": {
        "operationId": "getMaskedRows",
        "tags": [
          "Transforms"
        ],
        "summary": "Get masked rows.",
        "description": "Get masked rows.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Transform name",
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaskedRows"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/tmpl": {
      "get": {
        "operationId": "listAITemplates",
        "tags": [
          "AITemplates"
        ],
        "summary": "List AI templates.",
        "description": "List AI templates.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AITemplateDesc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/tmpl/schema/{proxy+}": {
      "get": {
        "operationId": "getAITemplateSchema",
        "tags": [
          "AITemplates"
        ],
        "summary": "Get AI template schema.",
        "description": "Get AI template schema.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AITemplateSchema"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/tmpl/render/{proxy+}": {
      "post": {
        "operationId": "renderAITemplateSchema",
        "tags": [
          "AITemplates"
        ],
        "summary": "Render AI template schema.",
        "description": "Render AI template schema.",
        "requestBody": {
          "description": "Template params",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/secrets/add/{name}": {
      "post": {
        "operationId": "addSecret",
        "tags": [
          "Secrets"
        ],
        "summary": "Add or update secret.",
        "description": "Add or update secret.",
        "requestBody": {
          "description": "Template params",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Secret type"
                  }
                },
                "additionalProperties": true
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/lint": {
      "post": {
        "operationId": "lintProject",
        "tags": [
          "Projects"
        ],
        "summary": "Lint project files.",
        "description": "Lint project files.",
        "parameters": [
          {
            "in": "query",
            "name": "diff",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Do files diff."
          },
          {
            "in": "query",
            "name": "dry_run",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Do push dry-run."
          }
        ],
        "requestBody": {
          "description": "parameters for project push",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Object to push in JSON format"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "List of objects to push in JSON format"
                    }
                  }
                ]
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string",
                "description": "Object(s) to push in YAML format"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LintResult"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Read operation conflict or database is locked: please retry"
          }
        }
      }
    },
    "/v1/secrets": {
      "get": {
        "operationId": "listSecrets",
        "tags": [
          "Secrets"
        ],
        "summary": "List all saved secrets.",
        "description": "List all saved secrets.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/secrets/{secret_id}": {
      "delete": {
        "operationId": "deleteSecret",
        "tags": [
          "Secrets"
        ],
        "summary": "Delete secret.",
        "description": "Delete secret.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Secret not found"
          }
        }
      }
    },
    "/v1/aws/external_id": {
      "get": {
        "operationId": "getExternalId",
        "tags": [
          "S3"
        ],
        "summary": "Get AWS external id.",
        "description": "Get AWS external id.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "external_id": {
                      "type": "string",
                      "description": "AWS external id"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/v1/mysql/sample": {
      "post": {
        "operationId": "getMysqlDataSample",
        "tags": [
          "MySQL"
        ],
        "summary": "Get sample of data from MySQL.",
        "description": "Get sample of data from MySQL.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "MySQL secret to use"
                  },
                  "table": {
                    "type": "string",
                    "description": "MySQL table"
                  },
                  "sample_size": {
                    "type": "integer",
                    "description": "Sample size, rows",
                    "default": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/mysql/schema": {
      "post": {
        "operationId": "getMysqlSchema",
        "tags": [
          "MySQL"
        ],
        "summary": "Get MySQL schema, list of tables.",
        "description": "Get MySQL schema, list of tables.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "MySQL secret to use"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/mysql/test": {
      "post": {
        "operationId": "testMysqlCredentials",
        "tags": [
          "MySQL"
        ],
        "summary": "Test MySQL credentials.",
        "description": "Test MySQL credentials.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "MySQL credentials",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "MySQL username"
                  },
                  "password": {
                    "type": "string",
                    "description": "MySQL password"
                  },
                  "host": {
                    "type": "string",
                    "description": "MySQL hostname"
                  },
                  "port": {
                    "type": "string",
                    "default": 3306,
                    "description": "MySQL TCP port"
                  },
                  "database": {
                    "type": "string",
                    "description": "MySQL database"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/mysql/table": {
      "post": {
        "operationId": "suggestMysqlTableSchema",
        "tags": [
          "MySQL"
        ],
        "summary": "Get suggested MySQL table schema.",
        "description": "Get suggested MySQL table schema.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "MySQL secret to use"
                  },
                  "table": {
                    "type": "string",
                    "description": "MySQL table"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/yaml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Misc error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    }
  },
  "tags": []
}